// Grid Column Generator
// ----------------------------

// Function: figure out grid percentage
@function grid-percent($grid-columns, $container-width, $i) {
  $percent: 100 / $grid-columns * $i * 1%;
  @return $percent;
}

// Semantic Grid
// ----------------------------
@mixin ctn-container ($width: $content-width) {
  @extend %clearfix;
  margin: 0 auto;
  padding: 0;
  width: $width + $value;
}

@mixin ctn-grid ($width) {
  @extend %clearfix;
  box-sizing: border-box;
  float: $lang-front;
  padding: 0 $gutter / 2 + $value;
  position: relative;
  width: $width * 1%;
}


// Column Grid
// ----------------------------
@mixin column-grid {

  %column-base {
    box-sizing: border-box;
    float: $lang-front;
    padding: 0 $gutter / 2 + $value;
    position: relative;
    @extend %clearfix;
  }

  /* Large Destkop Grid */
  /* ---------------------------- */
  .#{$container-class} {
    @include ctn-container($d-width);

    @include grid-generate(desktop);


    //@include push-pull($d-columns, $d-width, $push-class, $pull-class);
  }

  /* Full Width Container */
  .#{$container-class}-full {
    width: 100%;
  }

  /* Small Desktop Grid */
  /* ---------------------------- */
  @media screen and (max-width: $d-width + $value) {
    .#{$container-class} {
      width: 100%;
    }
    @include show-hide-view(desktop);
  }

  /* Tablet Grid */
  /* ---------------------------- */
  @media screen and (max-width: $t-width + $value) {
    .#{$container-class} {
      @include grid-generate(tablet);
    }

  }

  /* Mobile Grid */
  /* ---------------------------- */
  @media screen and (max-width: $m-width + $value) {
    .#{$container-class} {
      @include grid-generate(mobile);
    }
  }


  .#{$grid-class}-center {
    float: none !important;
    margin: 0 auto;
  }

  @include clearfix();
}

// Grid Creator
// ----------------------------
@mixin grid-creator($class, $push, $pull, $columns, $width) {
  @for $i from 1 through $columns {
    .#{$class}-#{$i} {
      @extend %column-base;
      @extend %clearfix;
      width: grid-percent($columns, $width, $i);
    }
    .#{$push}-#{$i} {
      #{$lang-front}: grid-percent($columns, $width, $i);
    }
    .#{$pull}-#{$i} {
      #{$lang-front}: (grid-percent($columns, $width, $i)) * -1;
    }
  }
}

// Generate grid
// ----------------------------
@mixin grid-generate($resp:null) {
  @if $resp == "tablet" {
    // adjust grid for tablet
    @include adjust-grid($t-columns, $d-columns, $grid-class, $push-class, $pull-class, t-full-width, t-no-push-pull);
    // create tablet grid
    @include grid-creator($t-grid-class, $t-push-class, $t-pull-class, $t-columns, $t-width);
  }
  @if $resp == "mobile" {
    //adjust grid for mobile
    @include adjust-grid($m-columns, $d-columns, $grid-class, $push-class, $pull-class, t-full-width, t-no-push-pull);
    @include adjust-grid($m-columns, $t-columns, $grid-class, $t-push-class, $t-pull-class, m-full-width, m-no-push-pull);
    // create mobile grid
    @include grid-creator($m-grid-class, $m-push-class, $m-pull-class, $m-columns, $m-width);
  }
  @if $resp == "desktop" {
    // create desktop grid
    @include grid-creator($grid-class, $push-class, $pull-class, $d-columns, $d-width);
  }

  @include nested-grid-elements();
}

// Adjust Grid on Smaller Devices (Tablets and Mobile
@mixin adjust-grid($columns, $columns-count, $class, $push, $pull, $full-width, $negate-push-pull) {
  %#{$full-width} {
    width: 100%;
  }
  %#{$negate-push-pull} {
    left: 0;
  }

  @for $i from 1 through $columns-count {
    @if $i < $columns {
      .#{$class}-#{$i} {
        @extend %#{$full-width};
      }
      .#{$push}-#{$i} {
        #{$lang-front}: grid-percent($columns, $d-width, $i);
      }
      .#{$pull}-#{$i} {
        #{$lang-front}: (grid-percent($columns, $d-width, $i)) * -1;
      }
    }
    @if $i > $columns - 1 {
      .#{$class}-#{$i} {
        @extend %#{$full-width};
      }
      .#{$push}-#{$i},
      .#{$pull}-#{$i} {
        @extend %#{$negate-push-pull};
      }
    }
  }
}

// Nested Children
// ----------------------------
@mixin nested-grid-elements($class: $grid-class) {
  [class*=#{$class}] {
    [class*=#{$class}]:first-of-type {
      padding-left: 0;
    }
    [class*=#{$class}]:last-of-type {
      padding-right: 0;
    }
  }
}

// No Margin - Strip Padding / Margin from Grid
// ----------------------------
@mixin no-margin() {
  .#{$prefix-class}-no-margin {
    padding: 0;
  }
}
