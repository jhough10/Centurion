// Grid Column Generator
// ----------------------------

// Column Grid
@mixin column-grid {

  %column-base {
    box-sizing: border-box;
    float: $lang-front;
    padding: 0 $gutter / 2 + $value;
    position: relative;
    @extend %clearfix;
  }

  /* Large Destkop Grid */
  /* ---------------------------- */
  .#{$container-class} {
    @extend %clearfix;
    margin: 0 auto;
    padding: 0;
    width: $d-width + $value;

    @include grid-generate($d-columns, $d-width, $grid-class);
    @include push-pull($d-columns, $d-width, $push-class, $pull-class);
  }

  /* Full Width Container */
  .#{$container-class}-full {
    width: 100%;
  }

  /* Small Desktop Grid */
  /* ---------------------------- */
  @media screen and (max-width: $d-width + $value) {
    .#{$container-class} {
      width: 100%;
    }
    @include show-hide-view(desktop);
  }
  /* Tablet Grid */
  /* ---------------------------- */
  @media screen and (max-width: $t-width + $value) {
    .#{$container-class} {
      %t-full-width {
        width: 100%;
      }
      %t-no-push-pull {
        left: 0;
      }
      @include grid-generate($t-columns, $t-width, $t-grid-class, tablet);
      @include push-pull($t-columns, $t-width, $t-push-class, $t-pull-class, tablet);
    }
  }
  /* Mobile Grid */
  /* ---------------------------- */
  @media screen and (max-width: $m-width + $value) {
    .#{$container-class} {
      %m-full-width {
        width: 100%;
      }
      %m-no-push-pull {
        left: 0;
      }

      @include grid-generate($m-columns, $m-width, $m-grid-class, mobile);
      @include push-pull($m-columns, $m-width, $m-push-class, $m-pull-class, mobile);
    }
  }
  @include center-grid-elements();
  @include clearfix();
}

// Generate grid
@mixin grid-generate($columns, $width, $class, $resp:null) {
  @if $resp == "tablet" {
    /* adjust desktop  */
    @include adjust-grid($columns, $d-columns, $grid-class, t-full-width);
  }
  @if $resp == "mobile" {
    @include adjust-grid($columns, $d-columns, $grid-class, m-full-width);
    @include adjust-grid($columns, $t-columns, $t-grid-class, m-full-width);
  }
  @for $i from 1 through $columns {
    .#{$class}-#{$i} {
      //@at-root (without: media) {
        @extend %column-base;
        @extend %clearfix;
      //}
      width: grid-percent($columns, $width, $i);
    }
  }


  @include nested-grid-elements();
}

// Function: figure out grid percentage
@function grid-percent($grid-columns, $container-width, $i) {
  $percent: 100 / $grid-columns * $i * 1%;
  @return $percent;
}

// Adjust Grid on Smaller Devices (Tablets and Mobile
@mixin adjust-grid($columns, $columns-count, $class, $extend:null) {
  @for $i from 1 through $columns-count {
    @if $i > $columns - 1 {
      .#{$class}-#{$i} {
        @extend %#{$extend};
      }
    }
    @if $i < $columns {
      .#{$class}-#{$i} {
        width: grid-percent($columns, $d-width, $i);
      }
    }
  }
}

// Push and Pull for Grid Elements
@mixin push-pull($columns, $width, $push-elem, $pull-elem, $resp:null) {

  @if $resp == "tablet" {
    @include adjust-push-pull($columns, $d-columns, $push-class, $pull-class, t-no-push-pull);
  }
  @if $resp == "mobile" {
    @include adjust-push-pull($columns, $d-columns, $push-class, $pull-class, m-no-push-pull);
    @include adjust-push-pull($columns, $t-columns, $t-push-class, $t-pull-class, m-no-push-pull);
  }
  @for $i from 1 through $columns {
    @if $i < $columns { // to push full columns add +1
      .#{$push-elem}-#{$i} {
        #{$lang-front}: grid-percent($columns, $width, $i);
      }
      .#{$pull-elem}-#{$i} {
        #{$lang-front}: (grid-percent($columns, $width, $i)) * -1;
      }
    }
  }
}

// Adjust Push / Pull for Smaller Devices (Tablet and Mobile)
@mixin adjust-push-pull($columns, $columns-count, $push-elem, $pull-elem, $extend:null) {
  @for $i from 1 through $columns-count {
    @if $i < $columns {
      .#{$push-elem}-#{$i} {
        #{$lang-front}: grid-percent($columns, $d-width, $i);
      }
      .#{$pull-elem}-#{$i} {
        #{$lang-front}: (grid-percent($columns, $d-width, $i)) * -1;
      }
    }
    @if $i > $columns - 1 {
      .#{$push-elem}-#{$i},
      .#{$pull-elem}-#{$i} {
        @extend %#{$extend};
      }
    }
  }
}

// Nested Children
@mixin nested-grid-elements($class: $grid-class) {
  [class*=#{$class}] {
    [class*=#{$class}]:first-of-type {
      padding-left: 0;
    }
    [class*=#{$class}]:last-of-type {
      // padding-left: 0;
      padding-right: 0;
    }
  }
}

// Grid Center
@mixin center-grid-elements($class: $grid-class) {
  .#{$class}-center {
    float: none !important;
    margin: 0 auto;
  }
}

// No Margin - Strip Padding / Margin from Grid
@mixin no-margin() {
  .#{$prefix-class}-no-margin {
    padding: 0;
  }
}

// Show & Hide
@mixin show-hide($value) {
  @include show-hide-view($value);
}
